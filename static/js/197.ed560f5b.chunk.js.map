{"version":3,"file":"static/js/197.ed560f5b.chunk.js","mappings":"8MAOAA,EAAAA,GAA0BC,UAAY,0BAA0BD,EAAAA,8BAEhE,MAAME,EAAU,CACdC,QAAS,UACTC,oBAAqB,oBAGjBC,EAAW,KAEF,SAASC,EAAaC,GACnC,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAASH,EAAMI,UAChCC,EAAUC,IAAeH,EAAAA,EAAAA,aACzBI,EAAcC,IAAmBL,EAAAA,EAAAA,UAAS,OAC1CM,EAAgBC,IAAqBP,EAAAA,EAAAA,aACrCQ,EAAcC,IAAmBT,EAAAA,EAAAA,WAAS,GAE3CU,GAAWC,EAAAA,EAAAA,cAAaC,IAC5B,MAAOC,GAASD,EACZC,GACFN,EAAkBM,EAAMC,YAAYC,MACtC,GACC,KAEHC,EAAAA,EAAAA,GAAkBZ,EAAc,CAAC,EAAGM,GAkBpC,OACEO,EAAAA,EAAAA,MAAA,OACEC,UAAW,4DAERC,SAAA,EAEHC,EAAAA,EAAAA,KAAA,OACEF,UAAW,8FAGXG,IAAKhB,EAAgBc,UAErBC,EAAAA,EAAAA,KAACE,EAAAA,EAAQ,CACPxB,KAAMA,EACNyB,cA9BR,SAA8BC,GAA8B,IAA3BtB,SAAUuB,GAAcD,EACvDrB,EAAYsB,EACd,EA6BQjC,QAASA,EACT0B,UAAU,YAAWC,SAEpBO,MAAMC,KAAK,IAAID,MAAMxB,IAAW,CAAC0B,EAAKC,KACrCT,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CAEHC,WAAYF,EAAQ,EACpBd,MACET,EAAiB0B,KAAKC,IAAI3B,EAAgBX,GAAYA,EAExDuB,UAAU,4DALL,QAAQW,EAAQ,YAW7BT,EAAAA,EAAAA,KAAA,UACEc,QA5CmBC,KAClBC,SAASC,mBAMZD,SAASE,iBACT7B,GAAgB,KANhBL,EAAamC,oBAAoBC,OAAOC,IACtCC,QAAQC,MAAMF,EAAI,IAEpBhC,GAAgB,GAIlB,EAoCIS,UAAU,qHAAoHC,SAE7HX,GAAeY,EAAAA,EAAAA,KAACwB,EAAAA,IAAU,CAACC,KAAM,MAASzB,EAAAA,EAAAA,KAAC0B,EAAAA,IAAQ,CAACD,KAAM,SAInE,C","sources":["components/Presentation.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { useResizeObserver } from \"@wojtekmaj/react-hooks\";\nimport { pdfjs, Document, Page } from \"react-pdf\";\nimport { FaExpand, FaCompress } from \"react-icons/fa\";\nimport \"react-pdf/dist/esm/Page/AnnotationLayer.css\";\nimport \"react-pdf/dist/esm/Page/TextLayer.css\";\n\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.mjs`;\n\nconst options = {\n  cMapUrl: \"/cmaps/\",\n  standardFontDataUrl: \"/standard_fonts/\",\n};\n\nconst maxWidth = 1200;\n\nexport default function Presentation(props) {\n  const [file, setFile] = useState(props.pdfFile);\n  const [numPages, setNumPages] = useState();\n  const [containerRef, setContainerRef] = useState(null);\n  const [containerWidth, setContainerWidth] = useState();\n  const [isFullScreen, setIsFullScreen] = useState(false);\n\n  const onResize = useCallback((entries) => {\n    const [entry] = entries;\n    if (entry) {\n      setContainerWidth(entry.contentRect.width);\n    }\n  }, []);\n\n  useResizeObserver(containerRef, {}, onResize);\n\n  function onDocumentLoadSuccess({ numPages: nextNumPages }) {\n    setNumPages(nextNumPages);\n  }\n\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      containerRef.requestFullscreen().catch((err) => {\n        console.error(err);\n      });\n      setIsFullScreen(true);\n    } else {\n      document.exitFullscreen();\n      setIsFullScreen(false);\n    }\n  };\n\n  return (\n    <div\n      className={`flex items-center justify-center min-h-screen ${\n        isFullScreen ? \"bg-gray-100\" : \"bg-gray-100\"\n      }`}\n    >\n      <div\n        className={`relative w-full max-w-6xl overflow-auto p-6 rounded-lg transition-all duration-300 ${\n          isFullScreen ? \"h-screen\" : \"h-screen\"\n        }`}\n        ref={setContainerRef}\n      >\n        <Document\n          file={file}\n          onLoadSuccess={onDocumentLoadSuccess}\n          options={options}\n          className=\"shadow-lg\"\n        >\n          {Array.from(new Array(numPages), (_el, index) => (\n            <Page\n              key={`page_${index + 1}`}\n              pageNumber={index + 1}\n              width={\n                containerWidth ? Math.min(containerWidth, maxWidth) : maxWidth\n              }\n              className=\"mx-auto my-6 shadow-md border border-gray-300 rounded-lg\"\n            />\n          ))}\n        </Document>\n      </div>\n\n      <button\n        onClick={toggleFullScreen}\n        className=\"fixed bottom-6 right-6 p-4 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition duration-300\"\n      >\n        {isFullScreen ? <FaCompress size={24} /> : <FaExpand size={24} />}\n      </button>\n    </div>\n  );\n}\n"],"names":["pdfjs","workerSrc","options","cMapUrl","standardFontDataUrl","maxWidth","Presentation","props","file","setFile","useState","pdfFile","numPages","setNumPages","containerRef","setContainerRef","containerWidth","setContainerWidth","isFullScreen","setIsFullScreen","onResize","useCallback","entries","entry","contentRect","width","useResizeObserver","_jsxs","className","children","_jsx","ref","Document","onLoadSuccess","_ref","nextNumPages","Array","from","_el","index","Page","pageNumber","Math","min","onClick","toggleFullScreen","document","fullscreenElement","exitFullscreen","requestFullscreen","catch","err","console","error","FaCompress","size","FaExpand"],"sourceRoot":""}